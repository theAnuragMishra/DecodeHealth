// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orgs.sql

package database

import (
	"context"
)

const createOrg = `-- name: CreateOrg :exec
INSERT INTO orgs (name, role, password_hash) VALUES ($1, $2, $3)
`

type CreateOrgParams struct {
	Name         string
	Role         string
	PasswordHash string
}

func (q *Queries) CreateOrg(ctx context.Context, arg CreateOrgParams) error {
	_, err := q.db.Exec(ctx, createOrg, arg.Name, arg.Role, arg.PasswordHash)
	return err
}

const getLabs = `-- name: GetLabs :many
SELECT id, name, created_at, role, password_hash FROM orgs WHERE role = 'lab'
`

func (q *Queries) GetLabs(ctx context.Context) ([]Org, error) {
	rows, err := q.db.Query(ctx, getLabs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Org
	for rows.Next() {
		var i Org
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.Role,
			&i.PasswordHash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrg = `-- name: GetOrg :one
SELECT id, name, created_at, role, password_hash FROM orgs WHERE id = $1
`

func (q *Queries) GetOrg(ctx context.Context, id int32) (Org, error) {
	row := q.db.QueryRow(ctx, getOrg, id)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.Role,
		&i.PasswordHash,
	)
	return i, err
}
