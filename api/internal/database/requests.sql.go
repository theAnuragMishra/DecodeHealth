// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: requests.sql

package database

import (
	"context"
)

const createRequest = `-- name: CreateRequest :exec
INSERT INTO requests (name, sequence, age, hospital_id, lab_id) VALUES ($1, $2, $3, $4, $5)
`

type CreateRequestParams struct {
	Name       string
	Sequence   string
	Age        int16
	HospitalID int32
	LabID      int32
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) error {
	_, err := q.db.Exec(ctx, createRequest,
		arg.Name,
		arg.Sequence,
		arg.Age,
		arg.HospitalID,
		arg.LabID,
	)
	return err
}

const deleteRequest = `-- name: DeleteRequest :exec
DELETE FROM requests WHERE id = $1
`

func (q *Queries) DeleteRequest(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRequest, id)
	return err
}

const getRequestsForHospital = `-- name: GetRequestsForHospital :many
SELECT id, name, sequence, age, hospital_id, lab_id, status FROM requests WHERE hospital_id = $1
`

func (q *Queries) GetRequestsForHospital(ctx context.Context, hospitalID int32) ([]Request, error) {
	rows, err := q.db.Query(ctx, getRequestsForHospital, hospitalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Request
	for rows.Next() {
		var i Request
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Sequence,
			&i.Age,
			&i.HospitalID,
			&i.LabID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRequestsForLab = `-- name: GetRequestsForLab :many
SELECT id, name, sequence, age, hospital_id, lab_id, status FROM requests WHERE lab_id = $1
`

func (q *Queries) GetRequestsForLab(ctx context.Context, labID int32) ([]Request, error) {
	rows, err := q.db.Query(ctx, getRequestsForLab, labID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Request
	for rows.Next() {
		var i Request
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Sequence,
			&i.Age,
			&i.HospitalID,
			&i.LabID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markRequestAccepted = `-- name: MarkRequestAccepted :exec
UPDATE requests SET status = 'accepted' WHERE id = $1
`

func (q *Queries) MarkRequestAccepted(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, markRequestAccepted, id)
	return err
}

const markRequestDenied = `-- name: MarkRequestDenied :exec
UPDATE requests SET status = 'denied' where id = $1
`

func (q *Queries) MarkRequestDenied(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, markRequestDenied, id)
	return err
}

const markRequestFulfilled = `-- name: MarkRequestFulfilled :exec
UPDATE requests SET status = 'fulfilled' WHERE id = $1
`

func (q *Queries) MarkRequestFulfilled(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, markRequestFulfilled, id)
	return err
}
