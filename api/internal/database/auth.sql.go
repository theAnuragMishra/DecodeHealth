// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package database

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions(id, org_id, expires_at)
VALUES ($1, $2, $3)
`

type CreateSessionParams struct {
	ID        string
	OrgID     int32
	ExpiresAt time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.Exec(ctx, createSession, arg.ID, arg.OrgID, arg.ExpiresAt)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, org_id, expires_at FROM sessions WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(&i.ID, &i.OrgID, &i.ExpiresAt)
	return i, err
}

const updateSessionExpiry = `-- name: UpdateSessionExpiry :exec
UPDATE sessions SET expires_at = $1 WHERE id = $2
`

type UpdateSessionExpiryParams struct {
	ExpiresAt time.Time
	ID        string
}

func (q *Queries) UpdateSessionExpiry(ctx context.Context, arg UpdateSessionExpiryParams) error {
	_, err := q.db.Exec(ctx, updateSessionExpiry, arg.ExpiresAt, arg.ID)
	return err
}
